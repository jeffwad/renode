/**

  @module       app/models/TrackModel
  @description  A track containing multiple patterns, of which only one can play
                at any one time

*/
var BaseModel    = require("app/models/BaseModel"),
    PatternModel = require("app/models/PatternModel"),
    forEach      = require("lib/iter").forEach;

module.exports = BaseModel.create({

  //  properties


  /**
    @description  relationships
  */
  hasMany: {

    patterns: {
      model  : PatternModel,
      factory: "_createPattern"
    }

  },


  /**
    @description  accessors
  */
  accessors: {

    title: {
      type: "string"
    },

    midiOn: {
      type: "number"
    },

    midiOff: {
      type: "number"
    },

    activePattern: {
      type : PatternModel
    }

  },


  /**
    @description  constructor
  */
  __init__: function(data) {

    BaseModel.__init__.apply(this);

    this.midiOn  = data.midiOn;
    this.midiOff = data.midiOff;

    if(data.title) {
      this.title = data.title;
    }

    if(data.patterns) {
      forEach(data.patterns, this._createPattern, this);
    }

    this.activatePattern(0);

  },


  //  public

  /**
    @description  sets the currently active pattern
    @param        {String} id
  */
  activatePattern: function(index) {

    this.activePattern = this.patterns.getByIndex(index);

  },



  /**
    @description  retrieves the current steps notes from the active pattern
    @return       {Collection: app/models/NotesModel}
  */
  currentNotes: function() {

    return this.activePattern.currentNotes();

  }


  //  private




});